<!doctype html>
<html>
  <head>
    <title>Gmail API demo</title>
    <meta charset="UTF-8">

    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
    <style>
      iframe {
        width: 100%;
        border: 0;
        min-height: 80%;
        height: 600px;
        display: flex;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>Gmail API demo</h1>

      <button id="authorize-button" class="btn btn-primary hidden">Authorize</button>
      <button id="signout-button" class="btn btn-primary hidden">Sign out</button>

      <table id="messages-table" class="table table-striped table-inbox hidden">
        <thead>
          <tr>
            <th>From</th>
            <th>Subject</th>
            <th>Date/Time</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>

    <script src="//code.jquery.com/jquery-1.11.3.min.js"></script>
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>

    <script type="text/javascript">
      var clientId = '276717161036-dkru5i3d0c2tu7tsf2ae2g0p78g0dhsu.apps.googleusercontent.com';
      var apiKey = 'AIzaSyBUt65dxF83MCPmtehM_S5ZXxORVLwaeQs';
      var scopes = 'https://www.googleapis.com/auth/gmail.readonly';

      function handleClientLoad() {
        gapi.client.setApiKey(apiKey);
        window.setTimeout(checkAuth, 1);
      }

      function checkAuth() {
        gapi.auth.authorize({
          client_id: clientId,
          scope: scopes,
          immediate: true
        }, handleAuthResult);
      }


      var authorizeButton = document.getElementById('authorize-button');
      var signoutButton = document.getElementById('signout-button');
      var messagesTable = document.getElementById('messages-table');

      function handleAuthClick() {
        gapi.auth.authorize({
          client_id: clientId,
          scope: scopes,
          immediate: false
        }, handleAuthResult);
        return false;
      }

      function handleSignoutClick(event) {
        gapi.auth2.getAuthInstance().signOut();
      }

      function handleAuthResult(authResult) {
        if(authResult && !authResult.error) {
          loadGmailApi();
		  
		  authorizeButton.style.display = 'none';
          signoutButton.style.display = 'block';
		  messagesTable.style.display = 'block';

		  /*
          $('#authorize-button').remove();
          $('.table-inbox').removeClass("hidden");
		  */

        } else {
          /*
		  $('#authorize-button').removeClass("hidden");
          $('#authorize-button').on('click', function(){
            handleAuthClick();
          });
		  */
		  authorizeButton.style.display = 'block';
          signoutButton.style.display = 'none';
		  messagesTable.style.display = 'none';
          authorizeButton.onclick = handleAuthClick;
          signoutButton.onclick = handleSignoutClick;

        }
      }

      function loadGmailApi() {
        gapi.client.load('gmail', 'v1', displayInbox);
      }

      function displayInbox() {
        var request = gapi.client.gmail.users.messages.list({
          'userId': 'me',
          'labelIds': 'INBOX',
		  //q:	'has:attachment',
		  q:	'has:attachment filename:.pdf',
          'maxResults': 10
        });

        request.execute(function(response) {
          $.each(response.messages, function() {
            var messageRequest = gapi.client.gmail.users.messages.get({
              'userId': 'me',
              'id': this.id
            });

            messageRequest.execute(appendMessageRow);
          });
        });
      }

      function appendMessageRow(message) {
        $('.table-inbox tbody').append(
          '<tr>\
            <td>'+getHeader(message.payload.headers, 'From')+'</td>\
            <td>\
              <a href="#message-modal-' + message.id +
                '" data-toggle="modal" id="message-link-' + message.id+'">' +
                getHeader(message.payload.headers, 'Subject') +
              '</a>\
            </td>\
            <td>'+getHeader(message.payload.headers, 'Date')+'</td>\
          </tr>'
        );

        $('body').append(
          '<div class="modal fade" id="message-modal-' + message.id +
              '" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">\
            <div class="modal-dialog modal-lg">\
              <div class="modal-content">\
                <div class="modal-header">\
                  <button type="button"\
                          class="close"\
                          data-dismiss="modal"\
                          aria-label="Close">\
                    <span aria-hidden="true">&times;</span></button>\
                  <h4 class="modal-title" id="myModalLabel">' +
                    getHeader(message.payload.headers, 'Subject') +
                  '</h4>\
                </div>\
                <div class="modal-body">\
                  <iframe id="message-iframe-'+message.id+'" srcdoc="<p>Loading...</p>">\
                  </iframe>\
                </div>\
              </div>\
            </div>\
          </div>'
        );

        $('#message-link-'+message.id).on('click', function(){
          var ifrm = $('#message-iframe-'+message.id)[0].contentWindow.document;
          $('body', ifrm).html(getBody(message.payload));
        });
      }

      function getHeader(headers, index) {
        var header = '';

        $.each(headers, function(){
          if(this.name === index){
            header = this.value;
          }
        });
        return header;
      }

      function getBody(message) {
        var encodedBody = '';
        if(typeof message.parts === 'undefined')
        {
          encodedBody = message.body.data;
        }
        else
        {
          encodedBody = getHTMLPart(message.parts);
        }
        encodedBody = encodedBody.replace(/-/g, '+').replace(/_/g, '/').replace(/\s/g, '');
        return decodeURIComponent(escape(window.atob(encodedBody)));
      }

      function getHTMLPart(arr) {
        for(var x = 0; x <= arr.length; x++)
        {
          if(typeof arr[x].parts === 'undefined')
          {
            if(arr[x].mimeType === 'text/html')
            {
              return arr[x].body.data;
            }
          }
          else
          {
            return getHTMLPart(arr[x].parts);
          }
        }
        return '';
      }
    </script>


	<!-- The core Firebase JS SDK is always required and must be listed first -->
	<script src="//www.gstatic.com/firebasejs/8.6.7/firebase-app.js"></script>

	<!-- TODO: Add SDKs for Firebase products that you want to use
		https://firebase.google.com/docs/web/setup#available-libraries -->
	<!--
	<script src="//www.gstatic.com/firebasejs/8.6.7/firebase-analytics.js"></script>
	-->

	<script src="//www.gstatic.com/firebasejs/8.6.7/firebase-auth.js"></script>

	<script>
	// Your web app's Firebase configuration
	// For Firebase JS SDK v7.20.0 and later, measurementId is optional
	var firebaseConfig = {
		apiKey: "AIzaSyA6CX_eaJy1_wKTw6UM2BxH5-2J1_pt4H8",
		authDomain: "maildoc.firebaseapp.com",
		databaseURL: "https://maildoc.firebaseio.com",
		projectId: "maildoc",
		storageBucket: "maildoc.appspot.com",
		messagingSenderId: "276717161036",
		appId: "1:276717161036:web:b2dfdf5846a2c91d6042e9",
		measurementId: "G-6W6JTCQG9C"
	};
	// Initialize Firebase
	firebase.initializeApp(firebaseConfig);
	//firebase.analytics();

	// Listen for authentication state to change.
	firebase.auth().onAuthStateChanged(function(firebaseUser){
		if(firebaseUser){
			//firebaseUser defined: is logged in
			console.log('firebase: logged in');
			//do something with firebaseUser (e.g. assign to a state variable)
		}
		else {
			//firebaseUser undefined: is not logged in
			console.log('firebase: logged out');
		}
	});

	// https://firebase.google.com/docs/reference/js/firebase.auth.GoogleAuthProvider

	/*
	// Using a popup.
	var provider = new firebase.auth.GoogleAuthProvider();
	provider.addScope('profile');
	provider.addScope('email');
	firebase.auth().signInWithPopup(provider).then(function(result) {
		// This gives you a Google Access Token.
		var token = result.credential.accessToken;
		// The signed-in user info.
		var user = result.user;
	});
	*/
	</script>

    <script src="//apis.google.com/js/client.js?onload=handleClientLoad"></script>

  </body>
</html>
<!--
https://www.sitepoint.com/mastering-your-inbox-with-gmail-javascript-api/
https://github.com/sitepoint-editors/gmail-api-javascript-example/blob/master/01%20-%20Basic%20client/index.html
-->